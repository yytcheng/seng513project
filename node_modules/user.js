var crypto = require('crypto'),
dbAccess = require('./dbAccess'),
queryString = require('querystring');

// Maybe this should use a salt to secure the password in the database.
exports.md5hash = function(string){
	hash = crypto.createHash('md5');
	hash.update(string);
	return hash.digest('hex');
}
/*
* Checks if username and password match.
* 
* 'username': The username address of the user.
* 'password': The password to check.
* 'callback': returns (error, user), where error is null unless
*    an error occured and user is null if the password hashes don't
*    match or the user record otherwise.
*/
exports.authenticate = function(username, password, callback){
	dbAccess.find('users', { conditions:['name="' + username + '"']}, function(error, records){
		if(error)
		return callback(error, null);

		if(records.length == 0)
		return callback(null, null); // no user found.

		user = records[0];
		//console.log(user.password, exports.md5hash(password), password);

		if(user && (user.password != exports.md5hash(password))) 
		user = null;

		callback(null, user);
	});	
}

function parseCookieString(cookieString){
	cookiesSplit = cookieString.split(';');
	cookiesHash = {}
	for(var i in cookiesSplit){
		//remove whitespce
		cookiesSplit[i] = cookiesSplit[i].replace(/^\s+|\s+$/g,"");
		cookieParsed = queryString.parse(cookiesSplit[i])
		name = Object.keys(cookieParsed)[0]
		cookiesHash[name] = cookieParsed[name];
	}
	return cookiesHash;
}

/*
* given the request object this will return the user or null if
* not logged in.
* @param {Object} req The request object.
* @param {Function} callback Expects a callback of the form: callback(error, user)
*/
exports.getUserFromRequest = function(req, callback){

	//if user is cached don't call the database again. simply return the cache
	if(req.user){
		callback(null, req.user);
		return;
	}

	if(!req.headers.cookie)
	{
		return callback(null, null);
	}

	cookies = req.headers.cookie;

	cookiesHash = parseCookieString(cookies);

	session = cookiesHash.session;	

	var query = "SELECT * FROM users JOIN sessions ON sessions.user_id=users.id WHERE sessions.session_hash='"+session+"' ORDER BY id DESC LIMIT 1;";

	dbAccess.runQuery(query, function(error, records){
		if(error)
		return callback(error, null);

		if(records.length == 0)
		return callback(null, null); // no user with that session found.

		// Found User log in session, now use ID to find user
		dbAccess.find('users', { conditions:['id="' + records[0].user_id + '"']}, function(error, rows){
			if(error)
			return callback(error, null);

			if(rows.length == 0)
			return callback(null, null); // no user found.

			callback(null, rows[0]);
		});
	});
}

/* 
* This method is expected to be added to the request object.
* To get the current user based on the session id call req.getUser
* and the second parameter of the callback should be the user.
* To check if the user is logged in call req.getUser and check
* if the callback user is null.
*/
exports.getUser = function(callback){
	exports.getUserFromRequest(this, callback);
}
