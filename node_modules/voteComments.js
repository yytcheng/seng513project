/* 
This module records users votes for comments. In order to vote,
the user must be logged in. All the requests to this modules are
passed in HTML GET format:

http://.....voteComments/commentid=1&vote=0

The vote parameter can be 0 to indicate "Like" or anything else
for "Dislike"

The module looks in the cmntvote table to see if the user has
already voted for the particular comment. If the user has voted
earlier, they are quitely sent back to the originating page. 
Otherwise, the module then updates the current number of likes and dislikes 
associated with every issue in the comments table.

UPDATE: Yifan is working on showing the comments with issues

NOTE: Since the comments are not currently been shown, the only way
to test the comments is by using the HTTP GET request. Once the comments
are displayed, the following HTML code should be added in the code where
the comments are generated (see voteIssues.js for more information:

{{#user}}
	{{^userHasVoted}}
		<p>
			<table style="width: 100%">
				<tr>
					<td style="width: 31px">
						<a href="/voteComments?commentid={{id}}&vote=0">
							<img src="images/thumb_up.png">
						</a>
					</td>
					<td style="width: 49px">Like</td>
					<td style="width: 31px">
						<a href="/voteComments?commentid={{id}}&vote=1">
							<img src="images/thumb_down.png">
						</a>
					</td>
					<td>Unlike</td>
				</tr>
			</table>
		</p> 
{{/user}}
*/


var dbAccess = require('dbAccess');
var url = require('url');
var g_userVote; //0 = Like, Anything_Else = Dislike in GET
var g_userId;
var g_commentId ;

/* Database variable */

var VoteComments = exports.VoteComments = function() {
};

/**
* Takes care of the voting on comments
*/
function printPage(response) 
{
    
	return function(error, rows) 
	{	
	
		if (error) throw error;
	
		if (rows.length == 0) //If the Issue (parent of comment) doesn't exists
		{
			console.log("voteCommentsjs: Issue doesn't exists");
			console.log('Error occured saving Vote to the Database:' + error.toString());					
			response.write('<html><script language=\'JavaScript\'>alert(\'The comment does not exists! There was an error connecting to the database.\'),history.go(-1)</script></html>');
			response.end();
		}
				
		var votes_row = rows[0];		
		var vote_likes = votes_row['likes'];
		var vote_dislikes = votes_row['dislikes'];
		
		
		/*
		console.log("Likes & Dislikes");
		console.log(vote_likes);
		console.log(vote_dislikes);
		*/
		
		if (g_userVote == 0)
		{
			//User Likes the comment
			vote_likes = vote_likes + 1;
		}
		else
		{
			//User Dislikes the comment
			vote_dislikes = vote_dislikes + 1;
		}
	
		var sqlUpdateVotes = "UPDATE comments "
				+ "SET likes = " + vote_likes + ", dislikes = " + vote_dislikes + " WHERE id = " + votes_row['id'] + ";";
		console.log(sqlUpdateVotes);
		dbAccess.runQuery(sqlUpdateVotes, function(error, rows)
			{
				if(error) 
				{
					// If an error is generated
					
					console.log('Error occured saving Vote to the Database:' + error.toString());					
					response.write('<html><script language=\'JavaScript\'>alert(\'Your vote could not be recorded! There was an error connecting to the database.\'),history.go(-1)</script></html>');
					response.end();
				}
				else  //Successfull Vote; Simply go back to the previous page
				{
					
					response.write('<html><script language=\'JavaScript\'>history.go(-1)</script></html>');
					response.end();
				}
			});	
			
		//Also record the user vote for the comment
		var sqlRecordVote = "INSERT INTO 'cmntvotes' ('user_id', 'comment_id') "
				+ "VALUES ('" + g_userId + "', '" + votes_row['id'] + "');";
				
		console.log(sqlRecordVote);
		
		
		dbAccess.runQuery(sqlRecordVote, function(error, rows)
		{
				if(error) 
				{
					// If an error is generated
					
					console.log('voteCommentsjs:Error occured saving Vote to the Database:' + error.toString());					
					response.write('<html><script language=\'JavaScript\'>alert(\'Your vote could not be recorded! There was an error connecting to the database.\'),history.go(-1)</script></html>');
					response.end();
				}
				else  //Successfull Vote; Simply go back to the previous page
				{
					
					response.write('<html><script language=\'JavaScript\'>history.go(-1)</script></html>');
					response.end();
				}
		});
		
		}
}

/*
 * This function checks if the user has already voted on the
 * comment
 */

function checkUser(response) 
{
    
	return function(error, rows) 
	{
			if (rows.length == 0) 
			{
				//console.log("inner loop - inner 1");
				var sqlQuery = "SELECT * FROM comments WHERE id =  '" + g_commentId + "'";			
				console.log(sqlQuery);
				dbAccess.runQuery(sqlQuery, printPage(response));
			}
			else
			{
				//If the user has already voted, quitely go back just like Youtube or Google Maps does
				response.write('<html><script language=\'JavaScript\'>history.go(-1)</script></html>');
				response.end();	
				return;
			}
	}
}

/**
* Main function of the module
* @param request Incoming request
* @param response Response object to send the data
*/
VoteComments.display = function(request, response) 
{
    var parsedURL = url.parse(request.url, true);
		 
		 
	request.getUser(function(error, user){
		
		if(error) throw error;
		
				
		if(user)
		{
			console.log("voteCommentsjs: User is logged in");
			g_userId = user.id;
		}
		if (g_userId == undefined)
		{	
			console.log("voteCommentsjs: Error: User is *not* logged in. Can't vote on comments");
			//If the user is not logged it, redirect to the static message page
			response.write('<!DOCTYPE HTML><html><head><title>Plese wait</title>');
			response.write('<meta http-equiv="REFRESH" content="0;url=./public/voteFailed.html"></HEAD><BODY></BODY></HTML>');
			response.end();		
			return;
		}
		
		g_userVote = parsedURL.query.vote;
		g_commentId = parsedURL.query.commentid;	
		
		//Check if the user has already voted
		var sqlQueryCheck = "SELECT * FROM cmntvotes WHERE comment_id =  '" + g_commentId + "' AND user_id = '" + g_userId + "'";			
		console.log(sqlQueryCheck);
		dbAccess.runQuery(sqlQueryCheck, checkUser(response));
		
	}); 		
}