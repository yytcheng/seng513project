var messages = require('message'),
	url = require('url'),
	querystring = require('querystring'),
	users = require('users');

var ListMessages = exports.ListMessages = function() {};
var viewMessage = exports.viewMessage = function() {};
var NewMessage = exports.NewMessage = function() {};
var SendMessage = exports.SendMessage = function() {};

/**
 * Send the displayMessages HTML page to the client
 *
 */
function displayMessagesPage(response, user) {
	// Get the inbox messages
	messages.getMessages(user, 0, function(error, iMsgList) {
		messages.getMessages(user, 1, function(error, sMsgList) {
			var variables = {
					pageTitle: 'Civic Connect - Message Center',
					user: user,
					inboxMsgList: iMsgList,
					sentMsgList: sMsgList
				}
			response.render('views/listMessages.html', variables);
		});
	});
}

/**
 * Send the newMessage HTML page to the client
 *
 */
function displayNewMessagePage(response, currentUser, sendToUserName) {
	var variables = {
		pageTitle: 'Civic Connect - New Message',
		user: currentUser,
		loggedInUser: currentUser.name,
		toUserName: ''
	};
	if(sendToUserName)
		variables.toUserName = sendToUserName;
	response.render('views/newMessage.html', variables);
}

/**
 * Main function of the module
 * @param request Incoming request
 * @param response Response object to send the data
 */
NewMessage.display = function(request, response) {
	// Parse the url to see if it includes the name of the user to send to
	var parsedURL = url.parse(request.url, true);
	
	// TODO: check the session id from the cookie, then look up which user it is that way
	// This will do for now though..
	
	// Get logged-in user and display the New Message Page
	request.getUser(function(error, currentUser){
		if(error)
			util.log("Error getting user in messageInterface.NewMessage.display. " + error);
		if (currentUser) {
			// Display msgs
			displayNewMessagePage(response, currentUser, parsedURL.query.username);
		}
		else
			response.render('views/newMessage.html');
	});
};

/**
 * Main function of the module
 * @param request Incoming request
 * @param response Response object to send the data
 */
ListMessages.display = function(request, response) {
	// TODO: check the session id from the cookie, then look up which user it is that way
	// This will do for now though..
	
	// Get logged-in user and call display
	request.getUser(function(error, user){
		if(error)
			util.log("Error getting user in messageInterface.ListMessages.display. " + error);
		if (user) {
			// Display msgs
			displayMessagesPage(response, user.id);
		}
		else
			response.render('views/listMessages.html');
	});
};

viewMessage.display = function(request, response) {
	var parsedURL = url.parse(request.url, true);

	// TODO: check the session id from the cookie, then look up which user it is that way
	// This will do for now though..
	
	// Get logged-in user and call display
	request.getUser(function(error, user){
		if(error)
			util.log("Error getting user in messageInterface.display. " + error);
		if (user) {
			// Display msgs
			displayMessage(response, user.id, parsedURL.query.msgid, parsedURL.query.folderid);
		}
		else
			response.render('views/viewMessage.html');
	});
};

function displayMessage(response, user, msgId, folderId) {
	// Get the message
	messages.getMessage(msgId, folderId, function(error, message) {
		if(error)
			throw error; 
		var variables = {
			pageTitle: 'Civic Connect - Viewing Message - ' + message.subject,
			user: user,
			fromUserName: message.from_name,
			msgDate: message.date,
			msgSubject: message.subject,
			msgBody: message.body
		}
		response.render('views/viewMessage.html', variables);
	});
};

SendMessage.send = function(request, response) {
	//if (request['method'] == 'POST') {
		var data = '';
		request.on('data', function(chunk) {
			data += chunk;
		});
		
		request.on('end', function() {
			var qs = querystring.parse(data);
			request.getUser(function(error, user){
				if(error) {
					util.log("Error getting user in MessageInterface.SendMessage.Send. " + error);
					response.render('views/messageSent.html', { error: error });
				}
				if(!user) {
					util.log("Could not get user in MessageInterface.SendMessage.Send. " + error);
					response.render('views/messageSent.html', { error: error });
				}
				else {
					// Now get the userid of the tousername to be used in sendMessage
					users.getIdFromUsername(qs.tousername, function(error, touserid) {
						if (error) {
							util.log("Could not get touserid in MessageInterface.SendMessage.Send. " + error);
							error = "Could not get toUserId. Please go back and double check the name.";
							response.render('views/messageSent.html', { error: error });
						}
						else {
							// Send the message
							messages.sendMessage(user.id, touserid, qs.subject, qs.body, function(error) {
								if (error) {
									util.log("Error sending message in MessageInterface.SendMessage.Send. " + error);
									response.render('views/messageSent.html', { error: error });
								}
								else {
									response.render('views/messageSent.html');
								}
							});
						}
					});
				}
			});
		});
	// }
	// else {
		// var error = "Why is this not a POST request in MessageInterface.SendMessage.Send?";
		// util.log(error);
		// response.render('views/messageSent.html', { error: error });
	// }
}

