/* listIssues.js 
 * Contains functionality for rendering the issue list view 
 */ 
var dbAccess = require('dbAccess'), 
	url = require('url');

/* Number of issue by page */
var numIssuePage = 10;

var ListIssues = exports.ListIssues = function() {
};

/**
 * Retrieves the number total of pages
 * @param numPage Current page
 * @param sortBy Sort criterion of the issues
 * @param response Response object to send data to the client
 */
function getNumPageTotal(numPage, sortBy, response, user) {
    return function(error, rows) {
        if (error) throw error;

        var numPageTotal = rows[0]['count(*)'] / numIssuePage;
        if (numPageTotal != Math.floor(numPageTotal)) {
            numPageTotal++;
        }
        numPageTotal = Math.floor(numPageTotal);
        if (numPageTotal == 0) {
            numPageTotal = 1;
        }
        
        if (numPage > numPageTotal) {
            numPage = numPageTotal;
        }
        
        var sqlQuery = 'SELECT * FROM issues' + sortQuery(sortBy) + ' limit ' + numIssuePage + ' offset ' + (numPage - 1) * numIssuePage;
        dbAccess.runQuery(sqlQuery, printPage(numPage, numPageTotal, sortBy, response, user));
    };
}

/**
 * Prints the list of issues
 * @param numPage Current page number
 * @param numPageTotal Number total of pages
 * @param response Response object to send data to the client
 */
function printPage(numPage, numPageTotal, sortBy, response, user) {
    return function(error, rows) {	
			if (error) throw error;

			contentArray = []; 
			
            for (i=0; i<rows.length; i++)
            {
				// add like/dislike datas				
				var likes = (rows[i]['likes'] != null) ? rows[i]['likes'] : 0;
				var dislikes = (rows[i]['dislikes'] != null) ? rows[i]['dislikes'] : 0;
				var total = likes + dislikes;
				var likePerc, dislikePerc;			
				if (total == 0) { likePerc = 0; dislikePerc = 0; }
				else {
					likePerc = likes / total * 100;
					dislikePerc = dislikes / total * 100;
				}
				var obj = {
					iStatus: rows[i]['status'],
					iId: rows[i]['id'],
					iTitle: rows[i]['title'],
					iLastModified:	rows[i]['lastModified'],
					likecount: likes,
					dislikecount: dislikes,
					likepercentage: likePerc,
					dislikepercentage: dislikePerc
				};	
				contentArray.push(obj);
			}
			
			if (sortBy) {
				var sortByGetStrings = 'sortby=' + sortBy + '&';
			}
			else {
				var sortByGetStrings = "";
			}

			variables = {
				title: "Latest Issues",
				pageNumber: numPage,
				content: contentArray,
				sortByGetString: sortByGetStrings
			}
			
			/* Previous page */
			if (numPage - 1 > 0) {
				variables.previous = numPage-1;
			}

			/* Pager */
			var pagerArray = [];
			for (i = numPage - 2; i <= numPageTotal; i++) {
				if (i > 0) {
					if (i != numPage) {
						var link = '<a href="/?'+sortByGetStrings+'page='+i+'">'+i+'</a>';
					} 
					else {
						var link = '[' + i + ']';
					}
					var obj = { page: link }
					pagerArray.push(obj);
				}
			}
			
			variables.pager = pagerArray;

			/* Next page */
			if (parseInt(numPage) + 1 <= numPageTotal) {
				variables.next = parseInt(numPage) + 1;
			}
			
			variables.totalPages = numPageTotal;
			
			response.render('views/listIssue.html', variables);
    };
}

function sortQuery(sortby) {
	if(sortby) {
		return (" ORDER BY " + sortby);
	}
	else {
		return " ORDER BY 'lastModified'";
	}
}

/**
* Main function of the module
* @param request Incoming request
* @param response Response object to send the data
*/
ListIssues.display = function(request, response) {
    var parsedURL = url.parse(request.url, true);

    /* Retrieve sortBy parameter */
    var sortBy = parsedURL.query['sortby'];
    
    /* Retrieve the page number */
    var numPage = parsedURL.query['page'];
    if (numPage == undefined || isNaN(numPage)) {
        numPage = 1;
    }

	request.getUser(function(error, user) {	
		if (error) { throw error; }
	
		var sqlQuery = 'SELECT count(*) FROM issues';
		dbAccess.runQuery(sqlQuery, getNumPageTotal(numPage, sortBy, response, user));
	});
}

