/*
 * Module for new user signup 
 *
 * Created By: Jonathan Moore, Corliss Fung, Nasrullah Taha
 */ 

var dbAccess = require('dbAccess'),
	qs = require('querystring'),
	crypto = require('crypto'),
	reputation = require('reputation'),
	util = require('util'),
	user = require('user');

var SignupModule = exports.SignupModule = function() { 
	this.username;
	this.email;
	this.password;
};

/*
 * Create a new user in the database
 */
SignupModule.handleSignup = function(req, res) 
{
	if(req.method != 'POST') {
		res.render('views/signup.html');
		return;
	}
	
	console.log("New user signup initiated.");

	// The form data from the request is first read into SignupBody
	var signupBody = '';	
	req.on('data', function(chunk) {
		signupBody += chunk.toString();
	});
	
	// When all data is received, the data is parsed and inserted into database
	req.on('end', function() {
		// Parse the signup form information
		var signupInfo = qs.parse(signupBody);
		var username = signupInfo['username'];
		var email = signupInfo['email'];
		var password = signupInfo['new_password'];
		var neighborhood = signupInfo['neighborhood'];
		var postalcode = signupInfo['postalcode'];
		
		// Encrypt password
		cryptoPassword = user.md5hash(password);
		
		console.log("before going in");

		// Build SQL and insert the new user into the database
		var sqlInsertNewUser = "INSERT INTO 'users' ('name', 'email', 'password', 'isEditor', 'neighborhood', 'postal_code') "
				+ "VALUES ('" + username + "', '" + email + "', '" + cryptoPassword + "', '" + '0' + "', '" + neighborhood + "', '" + postalcode + "');";
		
		dbAccess.runQuery(sqlInsertNewUser, function(error, rows){
			if(error) {
				// If a database error is generated, just spit out failure message
				console.log('Error occured saving to Database during Signup:' + error.toString());
				res.render('views/signup.html', {error: 'Signup Failed: Database error.'})
			}
			else {
				// On success, redirect user to Welcome page.
				reputation.updateOnSignUp(username, email);
				//find id of newly created user - note: without UNIQUE constraint, this may return multiple users but will lock on to first, security hole.

				user.authenticate(username, password, function (error, user){
					if (error) throw error;

					if (user) {
						console.log("User '" + username + "' was successfully created, id = " + user.id);
						res.setHeader('set-cookie', 'session=' + user.id);
						redirectTo(res, '/signupSuccess.html');
					}
				});
			}
		});			
	});
};
